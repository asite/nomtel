<?php

/**
 * This is the model base class for the table "file".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "File".
 *
 * Columns in table "file" available as properties of the model,
 * followed by relations of table "file" available as properties of the model.
 *
 * @property string $id
 * @property string $dt
 * @property string $url
 *
 * @property Person[] $people
 * @property SubscriptionAgreement[] $subscriptionAgreements
 */
abstract class BaseFile extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'file';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'File|Files', $n);
	}

	public static function representingColumn() {
		return 'dt';
	}

	public function rules() {
		return array(
			array('dt', 'required'),
			array('url', 'length', 'max'=>200),
			array('url', 'default', 'setOnEmpty' => true, 'value' => null),
            array('dt','date','format'=>'dd.MM.yyyy HH:mm:ss'),
			array('id, dt, url', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'people' => array(self::MANY_MANY, 'Person', 'person_file(file_id, person_id)'),
			'subscriptionAgreements' => array(self::MANY_MANY, 'SubscriptionAgreement', 'subscription_agreement_file(file_id, subscription_agreement_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'people' => 'PersonFile',
			'subscriptionAgreements' => 'SubscriptionAgreementFile',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'dt' => Yii::t('app', 'Dt'),
			'url' => Yii::t('app', 'Url'),
			'people' => null,
			'subscriptionAgreements' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('dt', $this->dt, true);
		$criteria->compare('url', $this->url, true);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('dt',strval($this->dt));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->dt) && get_class($this->dt)=='EDateTime') $this->dt=new EString($this->dt->format(self::$mySqlDateTimeFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='dt') $value=$this->convertStringToEDateTime($value,'datetime');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}