<?php

/**
 * This is the model base class for the table "cashier_number".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CashierNumber".
 *
 * Columns in table "cashier_number" available as properties of the model,
 * followed by relations of table "cashier_number" available as properties of the model.
 *
 * @property integer $id
 * @property string $dt
 * @property integer $support_operator_id
 * @property string $number_id
 * @property string $type
 * @property string $ticket_id
 * @property string $sum_cashier
 * @property string $sum
 * @property integer $confirmed
 *
 * @property SupportOperator $supportOperator
 * @property Number $number
 * @property Ticket $ticket
 */
abstract class BaseCashierNumber extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'cashier_number';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'CashierNumber|CashierNumbers', $n);
	}

	public static function representingColumn() {
		return 'dt';
	}

	public function rules() {
		return array(
			array('dt, support_operator_id, number_id, type, ticket_id, sum_cashier, sum', 'required'),
			array('support_operator_id, confirmed', 'numerical', 'integerOnly'=>true),
			array('number_id, ticket_id', 'length', 'max'=>20),
			array('type', 'length', 'max'=>7),
			array('sum_cashier, sum', 'length', 'max'=>14),
			array('confirmed', 'default', 'setOnEmpty' => true, 'value' => null),
            array('dt','date','format'=>'dd.MM.yyyy HH:mm:ss'),
			array('id, dt, support_operator_id, number_id, type, ticket_id, sum_cashier, sum, confirmed', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'supportOperator' => array(self::BELONGS_TO, 'SupportOperator', 'support_operator_id'),
			'number' => array(self::BELONGS_TO, 'Number', 'number_id'),
			'ticket' => array(self::BELONGS_TO, 'Ticket', 'ticket_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'dt' => Yii::t('app', 'Dt'),
			'support_operator_id' => null,
			'number_id' => null,
			'type' => Yii::t('app', 'Type'),
			'ticket_id' => null,
			'sum_cashier' => Yii::t('app', 'Sum Cashier'),
			'sum' => Yii::t('app', 'Sum'),
			'confirmed' => Yii::t('app', 'Confirmed'),
			'supportOperator' => null,
			'number' => null,
			'ticket' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('dt', $this->dt, true);
		$criteria->compare('support_operator_id', $this->support_operator_id);
		$criteria->compare('number_id', $this->number_id);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('ticket_id', $this->ticket_id);
		$criteria->compare('sum_cashier', $this->sum_cashier, true);
		$criteria->compare('sum', $this->sum, true);
		$criteria->compare('confirmed', $this->confirmed);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('dt',strval($this->dt));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->dt) && get_class($this->dt)=='EDateTime') $this->dt=new EString($this->dt->format(self::$mySqlDateTimeFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='dt') $value=$this->convertStringToEDateTime($value,'datetime');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}