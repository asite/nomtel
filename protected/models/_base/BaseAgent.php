<?php

/**
 * This is the model base class for the table "agent".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Agent".
 *
 * Columns in table "agent" available as properties of the model,
 * followed by relations of table "agent" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parent_id
 * @property integer $user_id
 * @property string $name
 * @property string $surname
 * @property string $middle_name
 * @property string $phone_1
 * @property string $phone_2
 * @property string $phone_3
 * @property string $city
 * @property string $email
 * @property string $skype
 * @property string $icq
 * @property string $passport_series
 * @property string $passport_number
 * @property string $passport_issue_date
 * @property string $passport_issuer
 * @property string $birth_date
 * @property string $birth_place
 * @property string $registration_address
 * @property string $balance
 * @property string $stat_acts_sum
 * @property string $stat_payments_sum
 * @property integer $stat_sim_count
 * @property integer $taking_orders
 *
 * @property Act[] $acts
 * @property Agent $parent
 * @property Agent[] $agents
 * @property User $user
 * @property AgentReferralRate[] $agentReferralRates
 * @property BonusReportAgent[] $bonusReportAgents
 * @property BonusReportNumber[] $bonusReportNumbers
 * @property BonusReportNumber[] $bonusReportNumbers1
 * @property Payment[] $payments
 * @property Sim[] $sims
 * @property Sim[] $sims1
 * @property Ticket[] $tickets
 * @property TicketHistory[] $ticketHistories
 */
abstract class BaseAgent extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'agent';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Agent|Agents', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, surname, middle_name, phone_1, passport_series, passport_number, passport_issue_date, passport_issuer, birth_date, birth_place, registration_address', 'required'),
			array('parent_id, user_id, stat_sim_count, taking_orders', 'numerical', 'integerOnly'=>true),
			array('name, surname, middle_name, city, email, skype', 'length', 'max'=>100),
			array('phone_1, phone_2, phone_3', 'length', 'max'=>50),
			array('icq, passport_number', 'length', 'max'=>20),
			array('passport_series', 'length', 'max'=>10),
			array('passport_issuer, birth_place, registration_address', 'length', 'max'=>200),
			array('balance, stat_acts_sum, stat_payments_sum', 'length', 'max'=>14),
			array('parent_id, user_id, phone_2, phone_3, city, email, skype, icq, balance, stat_acts_sum, stat_payments_sum, stat_sim_count, taking_orders', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, parent_id, user_id, name, surname, middle_name, phone_1, phone_2, phone_3, city, email, skype, icq, passport_series, passport_number, passport_issue_date, passport_issuer, birth_date, birth_place, registration_address, balance, stat_acts_sum, stat_payments_sum, stat_sim_count, taking_orders', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'acts' => array(self::HAS_MANY, 'Act', 'agent_id'),
			'parent' => array(self::BELONGS_TO, 'Agent', 'parent_id'),
			'agents' => array(self::HAS_MANY, 'Agent', 'parent_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
			'agentReferralRates' => array(self::HAS_MANY, 'AgentReferralRate', 'agent_id'),
			'bonusReportAgents' => array(self::HAS_MANY, 'BonusReportAgent', 'agent_id'),
			'bonusReportNumbers' => array(self::HAS_MANY, 'BonusReportNumber', 'agent_id'),
			'bonusReportNumbers1' => array(self::HAS_MANY, 'BonusReportNumber', 'parent_agent_id'),
			'payments' => array(self::HAS_MANY, 'Payment', 'agent_id'),
			'sims' => array(self::HAS_MANY, 'Sim', 'parent_agent_id'),
			'sims1' => array(self::HAS_MANY, 'Sim', 'agent_id'),
			'tickets' => array(self::HAS_MANY, 'Ticket', 'agent_id'),
			'ticketHistories' => array(self::HAS_MANY, 'TicketHistory', 'agent_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'parent_id' => null,
			'user_id' => null,
			'name' => Yii::t('app', 'Name'),
			'surname' => Yii::t('app', 'Surname'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'phone_1' => Yii::t('app', 'Phone 1'),
			'phone_2' => Yii::t('app', 'Phone 2'),
			'phone_3' => Yii::t('app', 'Phone 3'),
			'city' => Yii::t('app', 'City'),
			'email' => Yii::t('app', 'Email'),
			'skype' => Yii::t('app', 'Skype'),
			'icq' => Yii::t('app', 'Icq'),
			'passport_series' => Yii::t('app', 'Passport Series'),
			'passport_number' => Yii::t('app', 'Passport Number'),
			'passport_issue_date' => Yii::t('app', 'Passport Issue Date'),
			'passport_issuer' => Yii::t('app', 'Passport Issuer'),
			'birth_date' => Yii::t('app', 'Birth Date'),
			'birth_place' => Yii::t('app', 'Birth Place'),
			'registration_address' => Yii::t('app', 'Registration Address'),
			'balance' => Yii::t('app', 'Balance'),
			'stat_acts_sum' => Yii::t('app', 'Stat Acts Sum'),
			'stat_payments_sum' => Yii::t('app', 'Stat Payments Sum'),
			'stat_sim_count' => Yii::t('app', 'Stat Sim Count'),
			'taking_orders' => Yii::t('app', 'Taking Orders'),
			'acts' => null,
			'parent' => null,
			'agents' => null,
			'user' => null,
			'agentReferralRates' => null,
			'bonusReportAgents' => null,
			'bonusReportNumbers' => null,
			'bonusReportNumbers1' => null,
			'payments' => null,
			'sims' => null,
			'sims1' => null,
			'tickets' => null,
			'ticketHistories' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('phone_1', $this->phone_1, true);
		$criteria->compare('phone_2', $this->phone_2, true);
		$criteria->compare('phone_3', $this->phone_3, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('skype', $this->skype, true);
		$criteria->compare('icq', $this->icq, true);
		$criteria->compare('passport_series', $this->passport_series, true);
		$criteria->compare('passport_number', $this->passport_number, true);
		$criteria->compare('passport_issue_date', $this->passport_issue_date, true);
		$criteria->compare('passport_issuer', $this->passport_issuer, true);
		$criteria->compare('birth_date', $this->birth_date, true);
		$criteria->compare('birth_place', $this->birth_place, true);
		$criteria->compare('registration_address', $this->registration_address, true);
		$criteria->compare('balance', $this->balance, true);
		$criteria->compare('stat_acts_sum', $this->stat_acts_sum, true);
		$criteria->compare('stat_payments_sum', $this->stat_payments_sum, true);
		$criteria->compare('stat_sim_count', $this->stat_sim_count);
		$criteria->compare('taking_orders', $this->taking_orders);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}