<?php

/**
 * This is the model base class for the table "agent".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Agent".
 *
 * Columns in table "agent" available as properties of the model,
 * followed by relations of table "agent" available as properties of the model.
 *
 * @property string $id
 * @property string $user_id
 * @property string $name
 * @property string $surname
 * @property string $middle_name
 * @property string $phone1
 * @property string $phone2
 * @property string $phone3
 * @property string $email
 * @property string $skype
 * @property string $icq
 * @property string $passport_series
 * @property string $passport_number
 * @property string $passport_issue_date
 * @property string $passport_issuer
 * @property string $birthday_date
 * @property string $birthday_place
 * @property string $registration_place
 *
 * @property User $user
 * @property DeliveryReport[] $deliveryReports
 * @property Sim[] $sims
 */
abstract class BaseAgent extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'agent';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Agent|Agents', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('user_id, name, surname, middle_name, phone1, passport_series, passport_number, passport_issue_date, passport_issuer, birthday_date, birthday_place, registration_place', 'required'),
			array('user_id, icq, passport_number', 'length', 'max'=>20),
			array('name, surname, middle_name, email, skype', 'length', 'max'=>100),
			array('phone1, phone2, phone3', 'length', 'max'=>50),
			array('passport_series', 'length', 'max'=>10),
			array('passport_issuer, birthday_place, registration_place', 'length', 'max'=>200),
			array('phone2, phone3, email, skype, icq', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, name, surname, middle_name, phone1, phone2, phone3, email, skype, icq, passport_series, passport_number, passport_issue_date, passport_issuer, birthday_date, birthday_place, registration_place', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
			'deliveryReports' => array(self::HAS_MANY, 'DeliveryReport', 'agent_id'),
			'sims' => array(self::HAS_MANY, 'Sim', 'agent_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'name' => Yii::t('app', 'Name'),
			'surname' => Yii::t('app', 'Surname'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'phone1' => Yii::t('app', 'Phone1'),
			'phone2' => Yii::t('app', 'Phone2'),
			'phone3' => Yii::t('app', 'Phone3'),
			'email' => Yii::t('app', 'Email'),
			'skype' => Yii::t('app', 'Skype'),
			'icq' => Yii::t('app', 'Icq'),
			'passport_series' => Yii::t('app', 'Passport Series'),
			'passport_number' => Yii::t('app', 'Passport Number'),
			'passport_issue_date' => Yii::t('app', 'Passport Issue Date'),
			'passport_issuer' => Yii::t('app', 'Passport Issuer'),
			'birthday_date' => Yii::t('app', 'Birthday Date'),
			'birthday_place' => Yii::t('app', 'Birthday Place'),
			'registration_place' => Yii::t('app', 'Registration Place'),
			'user' => null,
			'deliveryReports' => null,
			'sims' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('phone1', $this->phone1, true);
		$criteria->compare('phone2', $this->phone2, true);
		$criteria->compare('phone3', $this->phone3, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('skype', $this->skype, true);
		$criteria->compare('icq', $this->icq, true);
		$criteria->compare('passport_series', $this->passport_series, true);
		$criteria->compare('passport_number', $this->passport_number, true);
		$criteria->compare('passport_issue_date', $this->passport_issue_date, true);
		$criteria->compare('passport_issuer', $this->passport_issuer, true);
		$criteria->compare('birthday_date', $this->birthday_date, true);
		$criteria->compare('birthday_place', $this->birthday_place, true);
		$criteria->compare('registration_place', $this->registration_place, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}