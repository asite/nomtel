<?php

/**
 * This is the model base class for the table "blank_sim".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "BlankSim".
 *
 * Columns in table "blank_sim" available as properties of the model,
 * followed by relations of table "blank_sim" available as properties of the model.
 *
 * @property string $id
 * @property string $type
 * @property string $icc
 * @property integer $operator_id
 * @property integer $operator_region_id
 * @property string $used_dt
 * @property integer $used_support_operator_id
 * @property string $used_number_id
 *
 * @property SupportOperator $usedSupportOperator
 * @property Operator $operator
 * @property OperatorRegion $operatorRegion
 * @property Number $usedNumber
 */
abstract class BaseBlankSim extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'blank_sim';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'BlankSim|BlankSims', $n);
	}

	public static function representingColumn() {
		return 'type';
	}

	public function rules() {
		return array(
			array('type, icc, operator_id, operator_region_id', 'required'),
			array('operator_id, operator_region_id, used_support_operator_id', 'numerical', 'integerOnly'=>true),
			array('type', 'length', 'max'=>6),
			array('icc', 'length', 'max'=>50),
			array('used_number_id', 'length', 'max'=>20),
			array('used_dt', 'safe'),
			array('used_dt, used_support_operator_id, used_number_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('used_dt','date','format'=>'dd.MM.yyyy HH:mm:ss'),
			array('id, type, icc, operator_id, operator_region_id, used_dt, used_support_operator_id, used_number_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'usedSupportOperator' => array(self::BELONGS_TO, 'SupportOperator', 'used_support_operator_id'),
			'operator' => array(self::BELONGS_TO, 'Operator', 'operator_id'),
			'operatorRegion' => array(self::BELONGS_TO, 'OperatorRegion', 'operator_region_id'),
			'usedNumber' => array(self::BELONGS_TO, 'Number', 'used_number_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'type' => Yii::t('app', 'Type'),
			'icc' => Yii::t('app', 'Icc'),
			'operator_id' => null,
			'operator_region_id' => null,
			'used_dt' => Yii::t('app', 'Used Dt'),
			'used_support_operator_id' => null,
			'used_number_id' => null,
			'usedSupportOperator' => null,
			'operator' => null,
			'operatorRegion' => null,
			'usedNumber' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('icc', $this->icc, true);
		$criteria->compare('operator_id', $this->operator_id);
		$criteria->compare('operator_region_id', $this->operator_region_id);
		$criteria->compare('used_dt', $this->used_dt, true);
		$criteria->compare('used_support_operator_id', $this->used_support_operator_id);
		$criteria->compare('used_number_id', $this->used_number_id);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('used_dt',strval($this->used_dt));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->used_dt) && get_class($this->used_dt)=='EDateTime') $this->used_dt=new EString($this->used_dt->format(self::$mySqlDateTimeFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='used_dt') $value=$this->convertStringToEDateTime($value,'datetime');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}