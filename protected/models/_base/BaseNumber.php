<?php

/**
 * This is the model base class for the table "number".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Number".
 *
 * Columns in table "number" available as properties of the model,
 * followed by relations of table "number" available as properties of the model.
 *
 * @property string $id
 * @property string $number
 * @property string $personal_account
 * @property string $status
 * @property string $warning_dt
 *
 * @property BalanceReport[] $balanceReports
 */
abstract class BaseNumber extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'number';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Number|Numbers', $n);
	}

	public static function representingColumn() {
		return 'number';
	}

	public function rules() {
		return array(
			array('number, status', 'required'),
			array('number, personal_account', 'length', 'max'=>50),
			array('status', 'length', 'max'=>7),
			array('warning_dt', 'safe'),
			array('personal_account, warning_dt', 'default', 'setOnEmpty' => true, 'value' => null),
            array('warning_dt','date','format'=>'dd.MM.yyyy HH:mm:ss'),
			array('id, number, personal_account, status, warning_dt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'balanceReports' => array(self::MANY_MANY, 'BalanceReport', 'balance_report_number(number_id, balance_report_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'balanceReports' => 'BalanceReportNumber',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'number' => Yii::t('app', 'Number'),
			'personal_account' => Yii::t('app', 'Personal Account'),
			'status' => Yii::t('app', 'Status'),
			'warning_dt' => Yii::t('app', 'Warning Dt'),
			'balanceReports' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('number', $this->number, true);
		$criteria->compare('personal_account', $this->personal_account, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('warning_dt', $this->warning_dt, true);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('warning_dt',strval($this->warning_dt));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->warning_dt) && get_class($this->warning_dt)=='EDateTime') $this->warning_dt=new EString($this->warning_dt->format(self::$mySqlDateTimeFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='warning_dt') $value=$this->convertStringToEDateTime($value,'datetime');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}