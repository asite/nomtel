<?php

/**
 * This is the model base class for the table "person".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Person".
 *
 * Columns in table "person" available as properties of the model,
 * followed by relations of table "person" available as properties of the model.
 *
 * @property string $id
 * @property string $sex
 * @property string $name
 * @property string $surname
 * @property string $middle_name
 * @property string $phone
 * @property string $email
 * @property string $passport_series
 * @property string $passport_number
 * @property string $passport_issue_date
 * @property string $passport_issuer
 * @property string $passport_issuer_subdivision_code
 * @property string $birth_date
 * @property string $birth_place
 * @property string $registration_address
 *
 * @property File[] $files
 * @property SubscriptionAgreement[] $subscriptionAgreements
 */
abstract class BasePerson extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'person';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Person|People', $n);
	}

	public static function representingColumn() {
		return 'sex';
	}

	public function rules() {
		return array(
			array('sex, name, surname, middle_name, passport_series, passport_number, passport_issue_date, passport_issuer, birth_date, birth_place, registration_address', 'required'),
			array('sex', 'length', 'max'=>1),
			array('name, surname, middle_name, phone, email, passport_issuer_subdivision_code', 'length', 'max'=>200),
			array('passport_series', 'length', 'max'=>10),
			array('passport_number', 'length', 'max'=>20),
			array('passport_issuer, birth_place, registration_address', 'length', 'max'=>500),
			array('phone, email, passport_issuer_subdivision_code', 'default', 'setOnEmpty' => true, 'value' => null),
            array('passport_issue_date','date','format'=>'dd.MM.yyyy'),
            array('birth_date','date','format'=>'dd.MM.yyyy'),
			array('id, sex, name, surname, middle_name, phone, email, passport_series, passport_number, passport_issue_date, passport_issuer, passport_issuer_subdivision_code, birth_date, birth_place, registration_address', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'files' => array(self::MANY_MANY, 'File', 'person_file(person_id, file_id)'),
			'subscriptionAgreements' => array(self::HAS_MANY, 'SubscriptionAgreement', 'person_id'),
		);
	}

	public function pivotModels() {
		return array(
			'files' => 'PersonFile',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'sex' => Yii::t('app', 'Sex'),
			'name' => Yii::t('app', 'Name'),
			'surname' => Yii::t('app', 'Surname'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'phone' => Yii::t('app', 'Phone'),
			'email' => Yii::t('app', 'Email'),
			'passport_series' => Yii::t('app', 'Passport Series'),
			'passport_number' => Yii::t('app', 'Passport Number'),
			'passport_issue_date' => Yii::t('app', 'Passport Issue Date'),
			'passport_issuer' => Yii::t('app', 'Passport Issuer'),
			'passport_issuer_subdivision_code' => Yii::t('app', 'Passport Issuer Subdivision Code'),
			'birth_date' => Yii::t('app', 'Birth Date'),
			'birth_place' => Yii::t('app', 'Birth Place'),
			'registration_address' => Yii::t('app', 'Registration Address'),
			'files' => null,
			'subscriptionAgreements' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('sex', $this->sex, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('passport_series', $this->passport_series, true);
		$criteria->compare('passport_number', $this->passport_number, true);
		$criteria->compare('passport_issue_date', $this->passport_issue_date, true);
		$criteria->compare('passport_issuer', $this->passport_issuer, true);
		$criteria->compare('passport_issuer_subdivision_code', $this->passport_issuer_subdivision_code, true);
		$criteria->compare('birth_date', $this->birth_date, true);
		$criteria->compare('birth_place', $this->birth_place, true);
		$criteria->compare('registration_address', $this->registration_address, true);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('passport_issue_date',strval($this->passport_issue_date));
        $this->setAttribute('birth_date',strval($this->birth_date));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->passport_issue_date) && get_class($this->passport_issue_date)=='EDateTime') $this->passport_issue_date=new EString($this->passport_issue_date->format(self::$mySqlDateFormat));
        if (is_object($this->birth_date) && get_class($this->birth_date)=='EDateTime') $this->birth_date=new EString($this->birth_date->format(self::$mySqlDateFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='passport_issue_date') $value=$this->convertStringToEDateTime($value,'date');
            if ($name=='birth_date') $value=$this->convertStringToEDateTime($value,'date');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}