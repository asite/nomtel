<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $id
 * @property string $status
 * @property string $username
 * @property string $password
 * @property integer $failed_logins
 * @property string $blocked_until
 * @property string $last_password_restore
 *
 * @property Agent[] $agents
 * @property Agent[] $agents1
 * @property Number[] $numbers
 * @property SupportOperator[] $supportOperators
 */
abstract class BaseUser extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'status';
	}

	public function rules() {
		return array(
			array('status, username', 'required'),
			array('failed_logins', 'numerical', 'integerOnly'=>true),
			array('status', 'length', 'max'=>7),
			array('username, password', 'length', 'max'=>200),
			array('blocked_until, last_password_restore', 'safe'),
			array('password, failed_logins, blocked_until, last_password_restore', 'default', 'setOnEmpty' => true, 'value' => null),
            array('blocked_until','date','format'=>'dd.MM.yyyy HH:mm:ss'),
            array('last_password_restore','date','format'=>'dd.MM.yyyy HH:mm:ss'),
			array('id, status, username, password, failed_logins, blocked_until, last_password_restore', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'agents' => array(self::HAS_MANY, 'Agent', 'user_id'),
			'agents1' => array(self::HAS_MANY, 'Agent', 'parent_id'),
			'numbers' => array(self::HAS_MANY, 'Number', 'user_id'),
			'supportOperators' => array(self::HAS_MANY, 'SupportOperator', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'status' => Yii::t('app', 'Status'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'failed_logins' => Yii::t('app', 'Failed Logins'),
			'blocked_until' => Yii::t('app', 'Blocked Until'),
			'last_password_restore' => Yii::t('app', 'Last Password Restore'),
			'agents' => null,
			'agents1' => null,
			'numbers' => null,
			'supportOperators' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('failed_logins', $this->failed_logins);
		$criteria->compare('blocked_until', $this->blocked_until, true);
		$criteria->compare('last_password_restore', $this->last_password_restore, true);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

    public function convertDateTimeFieldsToEDateTime() {
        // rest of work will do setAttribute() routine
        $this->setAttribute('blocked_until',strval($this->blocked_until));
        $this->setAttribute('last_password_restore',strval($this->last_password_restore));
    }

    public function convertDateTimeFieldsToString() {
        if (is_object($this->blocked_until) && get_class($this->blocked_until)=='EDateTime') $this->blocked_until=new EString($this->blocked_until->format(self::$mySqlDateTimeFormat));
        if (is_object($this->last_password_restore) && get_class($this->last_password_restore)=='EDateTime') $this->last_password_restore=new EString($this->last_password_restore->format(self::$mySqlDateTimeFormat));
    }

    public function afterFind() {
        $this->convertDateTimeFieldsToEDateTime();
    }

    private function convertStringToEDateTime($val,$type) {
        if (!$val) return null;
        try {
            $val=new EDateTime($val,null,$type);
        } catch (Exception $e) {
        }
        return $val;
    }

    public function setAttribute($name,$value) {
        if (is_string($value)) {
            if ($name=='blocked_until') $value=$this->convertStringToEDateTime($value,'datetime');
            if ($name=='last_password_restore') $value=$this->convertStringToEDateTime($value,'datetime');
        }
        return parent::setAttribute($name,$value);
    }

    public function beforeSave() {
        $this->convertDateTimeFieldsToString();

        return true;
    }

    public function afterSave() {
        $this->convertDateTimeFieldsToEDateTime();
    }
}