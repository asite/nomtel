<?php

/**
 * This is the model base class for the table "support_operator".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SupportOperator".
 *
 * Columns in table "support_operator" available as properties of the model,
 * followed by relations of table "support_operator" available as properties of the model.
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $name
 * @property string $surname
 * @property string $middle_name
 * @property string $phone
 * @property string $email
 *
 * @property Number[] $numbers
 * @property User $user
 */
abstract class BaseSupportOperator extends BaseGxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'support_operator';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SupportOperator|SupportOperators', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('user_id, name, surname, middle_name, phone, email', 'required'),
			array('user_id', 'numerical', 'integerOnly'=>true),
			array('name, surname, middle_name, phone, email', 'length', 'max'=>200),
			array('id, user_id, name, surname, middle_name, phone, email', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'numbers' => array(self::HAS_MANY, 'Number', 'support_operator_id'),
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'name' => Yii::t('app', 'Name'),
			'surname' => Yii::t('app', 'Surname'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'phone' => Yii::t('app', 'Phone'),
			'email' => Yii::t('app', 'Email'),
			'numbers' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('email', $this->email, true);

		$dataProvider=new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));

        $dataProvider->pagination->pageSize=self::ITEMS_PER_PAGE;
        return $dataProvider;
	}

}